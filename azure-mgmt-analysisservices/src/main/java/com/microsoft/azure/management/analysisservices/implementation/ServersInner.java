/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.analysisservices.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Servers.
 */
public class ServersInner implements InnerSupportsGet<AnalysisServicesServerInner>, InnerSupportsDelete<Void>, InnerSupportsListing<AnalysisServicesServerInner> {
    /** The Retrofit service to perform REST calls. */
    private ServersService service;
    /** The service client containing this operation class. */
    private AnalysisServicesManagementClientImpl client;

    /**
     * Initializes an instance of ServersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServersInner(Retrofit retrofit, AnalysisServicesManagementClientImpl client) {
        this.service = retrofit.create(ServersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Servers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}")
        Observable<Response<ResponseBody>> create(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Body AnalysisServicesServerInner serverParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Body AnalysisServicesServerInner serverParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Body AnalysisServicesServerUpdateParametersInner serverUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Body AnalysisServicesServerUpdateParametersInner serverUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers suspend" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend")
        Observable<Response<ResponseBody>> suspend(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers beginSuspend" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend")
        Observable<Response<ResponseBody>> beginSuspend(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers resume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume")
        Observable<Response<ResponseBody>> resume(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers beginResume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume")
        Observable<Response<ResponseBody>> beginResume(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers listSkusForNew" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus")
        Observable<Response<ResponseBody>> listSkusForNew(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.analysisservices.Servers listSkusForExisting" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus")
        Observable<Response<ResponseBody>> listSkusForExisting(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets details about the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalysisServicesServerInner object if successful.
     */
    public AnalysisServicesServerInner getByResourceGroup(String resourceGroupName, String serverName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();
    }

    /**
     * Gets details about the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalysisServicesServerInner> getByResourceGroupAsync(String resourceGroupName, String serverName, final ServiceCallback<AnalysisServicesServerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Gets details about the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<AnalysisServicesServerInner> getByResourceGroupAsync(String resourceGroupName, String serverName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<AnalysisServicesServerInner>, AnalysisServicesServerInner>() {
            @Override
            public AnalysisServicesServerInner call(ServiceResponse<AnalysisServicesServerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details about the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<ServiceResponse<AnalysisServicesServerInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AnalysisServicesServerInner>>>() {
                @Override
                public Observable<ServiceResponse<AnalysisServicesServerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AnalysisServicesServerInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AnalysisServicesServerInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AnalysisServicesServerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AnalysisServicesServerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalysisServicesServerInner object if successful.
     */
    public AnalysisServicesServerInner create(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        return createWithServiceResponseAsync(resourceGroupName, serverName, serverParameters).toBlocking().last().body();
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalysisServicesServerInner> createAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters, final ServiceCallback<AnalysisServicesServerInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, serverName, serverParameters), serviceCallback);
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AnalysisServicesServerInner> createAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        return createWithServiceResponseAsync(resourceGroupName, serverName, serverParameters).map(new Func1<ServiceResponse<AnalysisServicesServerInner>, AnalysisServicesServerInner>() {
            @Override
            public AnalysisServicesServerInner call(ServiceResponse<AnalysisServicesServerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AnalysisServicesServerInner>> createWithServiceResponseAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (serverParameters == null) {
            throw new IllegalArgumentException("Parameter serverParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(serverParameters);
        Observable<Response<ResponseBody>> observable = service.create(resourceGroupName, serverName, this.client.subscriptionId(), serverParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AnalysisServicesServerInner>() { }.getType());
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalysisServicesServerInner object if successful.
     */
    public AnalysisServicesServerInner beginCreate(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, serverName, serverParameters).toBlocking().single().body();
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalysisServicesServerInner> beginCreateAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters, final ServiceCallback<AnalysisServicesServerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, serverName, serverParameters), serviceCallback);
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<AnalysisServicesServerInner> beginCreateAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, serverName, serverParameters).map(new Func1<ServiceResponse<AnalysisServicesServerInner>, AnalysisServicesServerInner>() {
            @Override
            public AnalysisServicesServerInner call(ServiceResponse<AnalysisServicesServerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<ServiceResponse<AnalysisServicesServerInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String serverName, AnalysisServicesServerInner serverParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (serverParameters == null) {
            throw new IllegalArgumentException("Parameter serverParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(serverParameters);
        return service.beginCreate(resourceGroupName, serverName, this.client.subscriptionId(), serverParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AnalysisServicesServerInner>>>() {
                @Override
                public Observable<ServiceResponse<AnalysisServicesServerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AnalysisServicesServerInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AnalysisServicesServerInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AnalysisServicesServerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AnalysisServicesServerInner>() { }.getType())
                .register(201, new TypeToken<AnalysisServicesServerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serverName) {
        deleteWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().last().body();
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serverName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String serverName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String serverName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalysisServicesServerInner object if successful.
     */
    public AnalysisServicesServerInner update(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters).toBlocking().last().body();
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalysisServicesServerInner> updateAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters, final ServiceCallback<AnalysisServicesServerInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters), serviceCallback);
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AnalysisServicesServerInner> updateAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters).map(new Func1<ServiceResponse<AnalysisServicesServerInner>, AnalysisServicesServerInner>() {
            @Override
            public AnalysisServicesServerInner call(ServiceResponse<AnalysisServicesServerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AnalysisServicesServerInner>> updateWithServiceResponseAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (serverUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter serverUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(serverUpdateParameters);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, serverName, this.client.subscriptionId(), serverUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AnalysisServicesServerInner>() { }.getType());
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalysisServicesServerInner object if successful.
     */
    public AnalysisServicesServerInner beginUpdate(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters).toBlocking().single().body();
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalysisServicesServerInner> beginUpdateAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters, final ServiceCallback<AnalysisServicesServerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters), serviceCallback);
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<AnalysisServicesServerInner> beginUpdateAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serverName, serverUpdateParameters).map(new Func1<ServiceResponse<AnalysisServicesServerInner>, AnalysisServicesServerInner>() {
            @Override
            public AnalysisServicesServerInner call(ServiceResponse<AnalysisServicesServerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalysisServicesServerInner object
     */
    public Observable<ServiceResponse<AnalysisServicesServerInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String serverName, AnalysisServicesServerUpdateParametersInner serverUpdateParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (serverUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter serverUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(serverUpdateParameters);
        return service.beginUpdate(resourceGroupName, serverName, this.client.subscriptionId(), serverUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AnalysisServicesServerInner>>>() {
                @Override
                public Observable<ServiceResponse<AnalysisServicesServerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AnalysisServicesServerInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AnalysisServicesServerInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AnalysisServicesServerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AnalysisServicesServerInner>() { }.getType())
                .register(202, new TypeToken<AnalysisServicesServerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void suspend(String resourceGroupName, String serverName) {
        suspendWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().last().body();
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> suspendAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(suspendWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> suspendAsync(String resourceGroupName, String serverName) {
        return suspendWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> suspendWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.suspend(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginSuspend(String resourceGroupName, String serverName) {
        beginSuspendWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginSuspendAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginSuspendWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginSuspendAsync(String resourceGroupName, String serverName) {
        return beginSuspendWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Supends operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginSuspendWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginSuspend(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginSuspendDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginSuspendDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void resume(String resourceGroupName, String serverName) {
        resumeWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().last().body();
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> resumeAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resumeWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> resumeAsync(String resourceGroupName, String serverName) {
        return resumeWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> resumeWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.resume(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginResume(String resourceGroupName, String serverName) {
        beginResumeWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginResumeAsync(String resourceGroupName, String serverName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginResumeWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginResumeAsync(String resourceGroupName, String serverName) {
        return beginResumeWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginResumeWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginResume(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginResumeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginResumeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the Analysis Services servers for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AnalysisServicesServerInner&gt; object if successful.
     */
    public List<AnalysisServicesServerInner> listByResourceGroup(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets all the Analysis Services servers for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AnalysisServicesServerInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<AnalysisServicesServerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Gets all the Analysis Services servers for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AnalysisServicesServerInner&gt; object
     */
    public Observable<List<AnalysisServicesServerInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<AnalysisServicesServerInner>>, List<AnalysisServicesServerInner>>() {
            @Override
            public List<AnalysisServicesServerInner> call(ServiceResponse<List<AnalysisServicesServerInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all the Analysis Services servers for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AnalysisServicesServerInner&gt; object
     */
    public Observable<ServiceResponse<List<AnalysisServicesServerInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AnalysisServicesServerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AnalysisServicesServerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AnalysisServicesServerInner>> result = listByResourceGroupDelegate(response);
                        ServiceResponse<List<AnalysisServicesServerInner>> clientResponse = new ServiceResponse<List<AnalysisServicesServerInner>>(result.body().items(), result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AnalysisServicesServerInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AnalysisServicesServerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AnalysisServicesServerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the Analysis Services servers for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AnalysisServicesServerInner&gt; object if successful.
     */
    public List<AnalysisServicesServerInner> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all the Analysis Services servers for the given subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AnalysisServicesServerInner>> listAsync(final ServiceCallback<List<AnalysisServicesServerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the Analysis Services servers for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AnalysisServicesServerInner&gt; object
     */
    public Observable<List<AnalysisServicesServerInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<AnalysisServicesServerInner>>, List<AnalysisServicesServerInner>>() {
            @Override
            public List<AnalysisServicesServerInner> call(ServiceResponse<List<AnalysisServicesServerInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the Analysis Services servers for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AnalysisServicesServerInner&gt; object
     */
    public Observable<ServiceResponse<List<AnalysisServicesServerInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AnalysisServicesServerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AnalysisServicesServerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AnalysisServicesServerInner>> result = listDelegate(response);
                        ServiceResponse<List<AnalysisServicesServerInner>> clientResponse = new ServiceResponse<List<AnalysisServicesServerInner>>(result.body().items(), result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AnalysisServicesServerInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AnalysisServicesServerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AnalysisServicesServerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SkuEnumerationForNewResourceResultInner object if successful.
     */
    public SkuEnumerationForNewResourceResultInner listSkusForNew() {
        return listSkusForNewWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SkuEnumerationForNewResourceResultInner> listSkusForNewAsync(final ServiceCallback<SkuEnumerationForNewResourceResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSkusForNewWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForNewResourceResultInner object
     */
    public Observable<SkuEnumerationForNewResourceResultInner> listSkusForNewAsync() {
        return listSkusForNewWithServiceResponseAsync().map(new Func1<ServiceResponse<SkuEnumerationForNewResourceResultInner>, SkuEnumerationForNewResourceResultInner>() {
            @Override
            public SkuEnumerationForNewResourceResultInner call(ServiceResponse<SkuEnumerationForNewResourceResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForNewResourceResultInner object
     */
    public Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>> listSkusForNewWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSkusForNew(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>>>() {
                @Override
                public Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkuEnumerationForNewResourceResultInner> clientResponse = listSkusForNewDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SkuEnumerationForNewResourceResultInner> listSkusForNewDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SkuEnumerationForNewResourceResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SkuEnumerationForNewResourceResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SkuEnumerationForExistingResourceResultInner object if successful.
     */
    public SkuEnumerationForExistingResourceResultInner listSkusForExisting(String resourceGroupName, String serverName) {
        return listSkusForExistingWithServiceResponseAsync(resourceGroupName, serverName).toBlocking().single().body();
    }

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SkuEnumerationForExistingResourceResultInner> listSkusForExistingAsync(String resourceGroupName, String serverName, final ServiceCallback<SkuEnumerationForExistingResourceResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSkusForExistingWithServiceResponseAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForExistingResourceResultInner object
     */
    public Observable<SkuEnumerationForExistingResourceResultInner> listSkusForExistingAsync(String resourceGroupName, String serverName) {
        return listSkusForExistingWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<SkuEnumerationForExistingResourceResultInner>, SkuEnumerationForExistingResourceResultInner>() {
            @Override
            public SkuEnumerationForExistingResourceResultInner call(ServiceResponse<SkuEnumerationForExistingResourceResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForExistingResourceResultInner object
     */
    public Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>> listSkusForExistingWithServiceResponseAsync(String resourceGroupName, String serverName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSkusForExisting(resourceGroupName, serverName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>>>() {
                @Override
                public Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkuEnumerationForExistingResourceResultInner> clientResponse = listSkusForExistingDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SkuEnumerationForExistingResourceResultInner> listSkusForExistingDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SkuEnumerationForExistingResourceResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SkuEnumerationForExistingResourceResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
